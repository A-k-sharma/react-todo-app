{"version":3,"sources":["components/todo.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","items","target","value","newItems","state","list","push","setState","clearAll","delete","index","filter","element","id","showAddForm","action","i","console","log","edit","status","taskIndex","objectSpread","task","handleChange","addTask","length","concat","toConsumableArray","_this2","react_default","a","createElement","className","onSubmit","name","placeholder","required","type","autoFocus","input","onChange","map","onClick","logout","Component","Login","event","defineProperty","user","password","_this$props","isAuth","todo_Todo","App","item","_this$state","login_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a109288.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {BrowserRouter as render, Redirect} from \"react-router-dom\";\nimport '../App.css';\n\nexport default class Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list: [],\n            showAddForm: false,\n            edit: {\n                status: false,\n                taskIndex: 0\n            }\n        }\n    }\n        //function to add item\n\n        handleSubmit = (e) => {\n            e.preventDefault();\n            const items = e.target.items.value;\n            let newItems = this.state.list;\n            newItems.push(items)\n            this.setState({\n                list: newItems,\n\n            });\n            e.target.items.value = \"\";\n        }\n\n        //function to clear all\n\n        clearAll = () => {\n            this.setState({\n                list: []\n            })\n        };\n\n        //function to delete\n\n        delete= (index)=>{\n        const newItems = this.state.list.filter((element,id) => {\n            if (id !== index) {\n                return element;\n            }\n        });\n        this.setState({\n                list: newItems\n        });\n        };\n\n        //function to edit item\n\n        showAddForm = (action, i) => {\n            console.log(action);\n            if (action == \"edit\") {\n                this.setState({\n                    showAddForm: true,\n                    edit: {\n                        status: true,\n                        taskIndex: i\n                    }\n                })\n            }\n            else\n                this.setState(\n                    {\n                        showAddForm: true,\n                        edit: {...this.state.edit, status: false}\n                    },\n                    () => console.log(this.state)\n                );\n        };\n        task = \"\";\n        handleChange = e => {\n            if (!this.state.edit.status) this.task = e.target.value;\n            else {\n                let list = this.state.list;\n                let taskIndex = this.state.edit.taskIndex;\n                list[taskIndex] = e.target.value;\n                this.setState({\n                    list\n                });\n            }\n        };\n\n        addTask = e => {\n            e.preventDefault();\n            if (this.state.edit.status && this.task.length > 0) {\n                let list = [...this.state.list, this.task];\n                this.setState({\n                    list: list,\n                    showAddForm: false\n                });\n            }\n\n            else {\n                this.setState({\n                    showAddForm: false,\n                    edit: {\n                        ...this.state.edit,\n                        status: false\n                    }\n                });\n            }\n        };\n        //main render function\n\n        render()\n        {\n            return (\n                <div className={'todo-container'}>\n                    <h2>ADD TASK</h2>\n                    <form onSubmit={this.handleSubmit}>\n                        <input name=\"items\" className={\"text-field\"} placeholder=\"Enter task\" required/>\n                        <button type=\"submit\" className={\"form-btn\"}>ADD</button>\n                    </form>\n\n\n                    <h2>TODO LIST</h2>\n                    {(() => {\n                        if (this.state.showAddForm)\n                            return (\n                                <form onSubmit={this.addTask}>\n                                    <input\n                                        autoFocus\n                                        input=\"text\"\n                                        className=\"text-field\"\n                                        placeholder=\"Edit task\"\n                                        onChange={this.handleChange}\n                                    />\n                                    <input type=\"submit\" value=\"Save\" className={\"form-btn\"}/>\n                                </form>\n                            );\n                    })()}\n                    {this.state.list.map((list, index) => (\n                        <div className=\"item\">\n                            <div className={\"task\"}>{list}</div>\n                            <div className={\"item-btn\"}>\n\n                                <button onClick={() => {this.showAddForm(\"edit\",index)}} className={\"btn-edit\"}>\n                                    <i className=\"fas fa-edit\"> </i></button>\n\n                                <button onClick={() => {\n                                    this.delete(index)\n                                }} className={\"btn-del\"}><i className=\"fas fa-trash-alt\"> </i>\n                                </button>\n\n                            </div>\n\n                        </div>)\n                    )}\n                    <button className=\"clearAll\" onClick={this.clearAll}>Clear All</button>\n                    <button className=\"logout\" onClick={this.props.logout}>Log Out</button>\n\n                </div>\n\n            );\n        }\n\n    }\n\n","import React, {Component} from 'react';\nimport Todo from './todo';\nimport '../App.css';\n\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            user:\"\",\n            password:\"\"\n        }\n    }\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n\n\n    }\n\n    render() {\n        const { handleSubmit ,isAuth , logout} = this.props;\n        if (isAuth) {\n            return (\n                <Todo logout={logout}/>\n            )\n        }\n\n        return (\n            <div className={'login'}>\n                <h2>LOGIN</h2>\n                <form onSubmit={event => handleSubmit(event, this.state)}>\n                    <input type={'text'} onChange={this.handleChange} placeholder={'User Name'} name={'user'} required className={\"text-field\"}/>\n                    <input type={'password'} onChange={this.handleChange} placeholder={'Password'} name={'password'} required className={\"text-field\"}/>\n                    <input type={'submit'} value={'Login'} className={'form-btn'}/>\n\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Login from './components/login';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            user:\"admin\",\n            password:\"admin\",\n            isAuth: false\n        }\n    }\n    handleSubmit = (event, item) => {\n        event.preventDefault();\n        const { user, password } = this.state;\n        if (item.user === user && item.password === password) {\n            this.setState({\n                isAuth: true\n            });\n        } else {\n            this.setState({\n                isAuth: false\n            });\n        }\n    };\n\n    logout=()=>{\n        this.setState({\n            isAuth: false\n        })\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <Login handleSubmit={this.handleSubmit} isAuth={this.state.isAuth} logout={this.logout}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}